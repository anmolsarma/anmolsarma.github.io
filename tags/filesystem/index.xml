<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Filesystem on Anmol Sarma</title>
    <link>https://www.anmolsarma.in/tags/filesystem/</link>
    
    <language>en-in</language>
    
    
    <atom:link href="https://www.anmolsarma.in/tags/filesystem/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>File Creation Time in Linux</title>
      <link>https://www.anmolsarma.in/post/linux-file-creation-time/</link>
      <pubDate>Sun, 23 Jun 2019 19:24:22 +0530</pubDate>
      
      <guid>https://www.anmolsarma.in/post/linux-file-creation-time/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://man7.org/linux/man-pages/man1/stat.1.html&#34;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; utility can be used to retrieve the Unix file timestamps namely &lt;code&gt;atime&lt;/code&gt;, &lt;code&gt;ctime&lt;/code&gt; and &lt;code&gt;mtime&lt;/code&gt;. Of these, the benefit of &lt;code&gt;mtime&lt;/code&gt; which records the last time when the file was modified is immediately apparent. On the other hand, &lt;code&gt;atime&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; which records the last time the file was accessed has been called &lt;a href=&#34;https://lore.kernel.org/lkml/20070804210351.GA9784@elte.hu/&#34;&gt;&amp;ldquo;perhaps the most stupid Unix design idea of all times&amp;rdquo;&lt;/a&gt;. Intuitively, one might expect &lt;code&gt;ctime&lt;/code&gt; to record the creation time of a file. However, &lt;code&gt;ctime&lt;/code&gt; records the last time when the metadata of a file was changed.&lt;/p&gt;

&lt;p&gt;Typically, Unices do not record file creation times. While some individual filesystems do record file creation times&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, until recently Linux lacked a common interface to actually expose them to userspace applications. As a result, the output of &lt;code&gt;stat&lt;/code&gt; (GNU coreutils v8.30) on an ext4 filesystem (Which does record creation times) looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ stat .
  File: .
  Size: &lt;span style=&#34;color:#666&#34;&gt;4096&lt;/span&gt;            Blocks: &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;          IO Block: &lt;span style=&#34;color:#666&#34;&gt;4096&lt;/span&gt;   directory
Device: 803h/2051d      Inode: &lt;span style=&#34;color:#666&#34;&gt;3588416&lt;/span&gt;     Links: &lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;
Access: &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0775&lt;/span&gt;/drwxrwxr-x&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;  Uid: &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;/ anmol&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;   Gid: &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;/ anmol&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
Access: &lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-06-23 &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;:49:04.056933574 +0000
Modify: &lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-05-19 &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:29:59.609167627 +0000
Change: &lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-05-19 &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:29:59.609167627 +0000
 Birth: -&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the &amp;ldquo;&lt;code&gt;Birth&lt;/code&gt;&amp;rdquo; field, meant to show the creation time, sporting a depressing &amp;ldquo;&lt;code&gt;-&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The fact that &lt;code&gt;ctime&lt;/code&gt; does not mean creation time but change time coupled with the absence of a real creation time interface does lead to quite a bit of confusion. The confusion seems so pervasive that the &lt;code&gt;msdos&lt;/code&gt; driver in the Linux kernel &lt;a href=&#34;https://elixir.bootlin.com/linux/v5.1.14/source/fs/fat/inode.c#L883&#34;&gt;happily clobbers&lt;/a&gt; the FAT creation time with the Unix change time!&lt;/p&gt;

&lt;p&gt;The limitations of the current &lt;code&gt;stat()&lt;/code&gt; system call have been known for some time. A new system call providing extended attributes was &lt;a href=&#34;https://www.spinics.net/lists/linux-fsdevel/msg33831.html&#34;&gt;first proposed in 2010&lt;/a&gt; with the new &lt;a href=&#34;https://lwn.net/Articles/685791/#statx&#34;&gt;&lt;code&gt;statx()&lt;/code&gt;&lt;/a&gt; interface finally &lt;a href=&#34;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=a528d35e8bfcc521d7cb70aaf03e1bd296c8493f&#34;&gt;being merged into Linux 4.11 in 2017&lt;/a&gt;. It took so long at least in part because kernel developers quickly ran into one of the hardest problems in Computer Science: &lt;a href=&#34;https://lkml.org/lkml/2010/7/22/249&#34;&gt;naming things&lt;/a&gt;. Because there was no standard to guide them, each filesystem took to calling creation time by a different name. &lt;a href=&#34;https://elixir.bootlin.com/linux/v5.1.14/source/fs/ext4/ext4.h#L744&#34;&gt;Ext4&lt;/a&gt; and &lt;a href=&#34;https://elixir.bootlin.com/linux/v5.1.14/source/fs/xfs/libxfs/xfs_inode_buf.h#L40&#34;&gt;XFS&lt;/a&gt; called it &lt;code&gt;crtime&lt;/code&gt; while &lt;a href=&#34;https://elixir.bootlin.com/linux/v5.1.14/source/fs/btrfs/btrfs_inode.h#L187&#34;&gt;Btrfs&lt;/a&gt; and &lt;a href=&#34;https://elixir.bootlin.com/linux/v5.1.14/source/fs/jfs/jfs_incore.h#L46&#34;&gt;JFS&lt;/a&gt; called it &lt;code&gt;otime&lt;/code&gt;. Implementations also have slightly different semantics with JFS storing creation time only with the &lt;a href=&#34;https://elixir.bootlin.com/linux/v5.1.14/source/fs/jfs/jfs_imap.c#L3166&#34;&gt;precision of seconds&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Glibc took a while to add a wrapper for statx() with support landing in &lt;a href=&#34;https://www.sourceware.org/ml/libc-alpha/2018-08/msg00003.html&#34;&gt;version 2.28&lt;/a&gt; which was released in 2018. Fast forward to March 2019 when GNU &lt;a href=&#34;https://lists.gnu.org/archive/html/coreutils-announce/2019-03/msg00000.html&#34;&gt;coreutils 8.31&lt;/a&gt; was released with &lt;code&gt;stat&lt;/code&gt; finally gaining support for reading the file creation time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ stat .
  File: .
  Size: &lt;span style=&#34;color:#666&#34;&gt;4096&lt;/span&gt;            Blocks: &lt;span style=&#34;color:#666&#34;&gt;8&lt;/span&gt;          IO Block: &lt;span style=&#34;color:#666&#34;&gt;4096&lt;/span&gt;   directory
Device: 803h/2051d      Inode: &lt;span style=&#34;color:#666&#34;&gt;3588416&lt;/span&gt;     Links: &lt;span style=&#34;color:#666&#34;&gt;18&lt;/span&gt;
Access: &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;0775&lt;/span&gt;/drwxrwxr-x&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;  Uid: &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;/ anmol&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;   Gid: &lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1000&lt;/span&gt;/ anmol&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt;
Access: &lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-06-23 &lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;:49:04.056933574 +0000
Modify: &lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-05-19 &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:29:59.609167627 +0000
Change: &lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-05-19 &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:29:59.609167627 +0000
 Birth: &lt;span style=&#34;color:#666&#34;&gt;2019&lt;/span&gt;-05-19 &lt;span style=&#34;color:#666&#34;&gt;13&lt;/span&gt;:13:50.100925514 +0000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The impact of &lt;code&gt;atime&lt;/code&gt; on disk performance is mitigated by the use of &lt;a href=&#34;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/power_management_guide/relatime&#34;&gt;&lt;code&gt;relatime&lt;/code&gt;&lt;/a&gt; on modern Linux systems.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;For ext4, one can get the &lt;code&gt;crtime&lt;/code&gt; of a file using the &lt;code&gt;stat&lt;/code&gt; subcommand of the confusingly named &lt;a href=&#34;https://linux.die.net/man/8/debugfs&#34;&gt;&lt;code&gt;debugfs&lt;/code&gt;&lt;/a&gt; utility.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
