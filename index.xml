<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anmol Sarma</title>
    <link>https://www.anmolsarma.in/index.xml</link>
    <description>Recent content on Anmol Sarma</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-in</language>
    <copyright>Except where otherwise noted, content on this website is licensed under a &lt;a href=&#39;https://creativecommons.org/licenses/by/4.0/&#39;&gt;Creative Commons Attribution 4.0 International License&lt;/a&gt;.</copyright>
    <lastBuildDate>Tue, 13 Dec 2016 23:10:50 +0530</lastBuildDate>
    <atom:link href="https://www.anmolsarma.in/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>DCCP: The socket type you probably never heard of</title>
      <link>https://www.anmolsarma.in/post/dccp/</link>
      <pubDate>Tue, 13 Dec 2016 23:10:50 +0530</pubDate>
      
      <guid>https://www.anmolsarma.in/post/dccp/</guid>
      <description>

&lt;p&gt;&lt;em&gt;TL;DR: DCCP is a relatively newer transport layer protocol which draws from both TCP and UDP. Jump straight to the &lt;a href=&#34;#example-in-c&#34;&gt;example C code&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Historically, the majority of the traffic on the Internet has been over &lt;a href=&#34;https://en.wikipedia.org/wiki/Transmission_Control_Protocol&#34;&gt;TCP&lt;/a&gt; which provides a reliable connection-oriented stream between two hosts. &lt;a href=&#34;https://en.wikipedia.org/wiki/User_Datagram_Protocol&#34;&gt;UDP&lt;/a&gt; has been mainly used by applications whose brief transfers would be unacceptably slowed by TCP&amp;rsquo;s connection establishment overhead or those for which timeliness is more important than reliability. However, the increasing use of UDP for applications such as internet telephony and streaming media which transfer a large amount of data can lead to significant &lt;a href=&#34;https://en.wikipedia.org/wiki/Network_congestion&#34;&gt;network congestion&lt;/a&gt;. Since unlike TCP, UDP provides no inherent congestion control mechanism, an application can send UDP datagrams at a much higher rate than the available path capacity and cause congestion along the path. Increased congestion may lead to delays, packet loss and the degradation of the network&amp;rsquo;s quality of service.&lt;/p&gt;

&lt;p&gt;Applications and protocols that choose to use UDP as their transport must, therefore, employ mechanisms to prevent congestion and to establish some degree of fairness with concurrent traffic so that the network remains usable. A prominent example of such a congestion control scheme is &lt;a href=&#34;https://en.wikipedia.org/wiki/LEDBAT&#34;&gt;LEDBAT&lt;/a&gt; employed by &lt;a href=&#34;https://en.wikipedia.org/wiki/BitTorrent&#34;&gt;BitTorrent&lt;/a&gt;. However, implementing a congestion control scheme is difficult, time-consuming and error-prone. Multiple non-standard implementations also make it difficult to reason about how applications would respond to network congestion. &lt;a href=&#34;https://en.wikipedia.org/wiki/Datagram_Congestion_Control_Protocol&#34;&gt;DCCP&lt;/a&gt; - Datagram Congestion Control Protocol is intended to mitigate this problem as a transport for unreliable datagrams with built-in congestion control.&lt;/p&gt;

&lt;p&gt;From an application programmer&amp;rsquo;s perspective, DCCP differs from UDP by providing four additional features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Explicit connection establishment between hosts&lt;/li&gt;
&lt;li&gt;Selectable congestion control schemes&lt;/li&gt;
&lt;li&gt;Path MTU discovery to avoid fragmentation&lt;/li&gt;
&lt;li&gt;Service Codes for identifying applications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DCCP makes use of Explicit Congestion Notification but it is transparent the  application. DCCP is designed to leave additional functionality such as reliability or Forward Error Correction (FEC) to be layered on top, as and when required rather than at the protocol level itself.&lt;/p&gt;

&lt;h2 id=&#34;explicit-connection-establishment&#34;&gt;Explicit connection establishment&lt;/h2&gt;

&lt;p&gt;The connection establishment semantics of DCCP mirror those of TCP with a client that actively connects to a server that is passively listening on a port. DCCP connections are bidirectional. Logically, however, a DCCP connection consists of two separate unidirectional connections, called half-connections. Each half-connection is a one-way, unreliable datagram pipe. The rationale for this explained in the next section.&lt;/p&gt;

&lt;h2 id=&#34;selectable-congestion-control-schemes&#34;&gt;Selectable congestion control schemes&lt;/h2&gt;

&lt;p&gt;TCP implements congestion control entirely transparently to the application. While it is possible to configure the host to use a specific variant, there is no way for the application to discover which congestion control scheme is in force, let alone negotiate one. DCCP, however, can cater to the different needs of applications by allowing applications to negotiate the congestion control schemes. In fact, each of the half-connections can use a different scheme, allowing for greater control.&lt;/p&gt;

&lt;p&gt;Congesting the network by sending data at a rate that is faster than the slowest link between the endpoints will overwhelm it. This may lead to packet loss leading to retransmissions which may, in turn, lead to further congestion. The solution to this problem is to start transmitting data at a slow rate on a new connection and to then ramp up the speed until packet loss is detected. The transmission rate may then be scaled back until no further packet loss occurs. The optimum speed at which to transfer data  will change with network conditions over the life of the connection. Congestion control schemes differ in how packet loss is estimated and the rate at which is the transmission speed is ramped up or scaled back. DCCP congestion control schemes are denoted by Congestion Control Identifiers - CCIDs. Currently, three CCIDs have been formally specified:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4341&#34;&gt;CCID 2&lt;/a&gt; -  TCP-like Congestion Control:&lt;/strong&gt; A quick reacting scheme modelled after TCP which will rapidly ramp up speed to take advantage of available bandwidth and also rapidly scale back when congestion is detected. Suitable for applications that can handle large swings in transmission rates.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5348&#34;&gt;CCID 3&lt;/a&gt; - TCP-Friendly Rate Control (TFRC):&lt;/strong&gt; A slower reacting scheme intended to be friendly to concurrent TCP flows in the network. Provides a relatively smoother sending rate at the expense of possibly not utilising all available bandwidth. Suitable for media streaming applications that prefer to minimise abrupt changes in the sending rate.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc4828&#34;&gt;CCID 4&lt;/a&gt; - TCP-Friendly Rate Control for Small Packets (TFRC-SP):&lt;/strong&gt; An experimental scheme for applications that use a small datagram size and those that change their sending rate by varying the datagram size.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, the Linux kernel&amp;rsquo;s &lt;a href=&#34;https://github.com/uoaerg/linux-dccp&#34;&gt;DCCP Test Tree&lt;/a&gt; contains an experimental implementation of a scheme modelled after &lt;a href=&#34;https://en.wikipedia.org/wiki/CUBIC_TCP&#34;&gt;TCP CUBIC&lt;/a&gt;. There is also a mode that disables congestion control altogether for &lt;em&gt;UDP-like&lt;/em&gt; behaviour.&lt;/p&gt;

&lt;h2 id=&#34;pmtu-discovery&#34;&gt;PMTU discovery&lt;/h2&gt;

&lt;p&gt;Data between two internet hosts is transferred transmitted as a series of IP packets that pass through intermediate links. Each of these links has a maximum packet size or maximum transmission unit (MTU) that it can transmit without having to break it up into smaller fragments. The largest packet size that does not require fragmentation anywhere along a path is referred to as the path maximum transmission unit or PMTU. Applications can usually get better error tolerance by producing packets smaller than the PMTU. DCCP defines a maximum packet size (MPS) based on the PMTU and the congestion control scheme used for each connection. DCCP implementations will not send any packet bigger than the MPS and instead return an appropriate error to the application. The application can query the DCCP stack for the current MPS and restrict itself from sending datagrams larger than this value and thereby avoid &lt;a href=&#34;https://en.wikipedia.org/wiki/IP_fragmentation&#34;&gt;fragmentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;service-codes&#34;&gt;Service Codes&lt;/h2&gt;

&lt;p&gt;DCCP defines a 32 bit Service Code to disambiguate between multiple applications associated with a single a server port. The client specifies the Service Code it wants to connect to and this is used to identify the intended service or application to process a DCCP connection request. Essentially, Service Codes provide an additional level of indirection for connection multiplexing. A server listening on a port may be associated with multiple Service Codes but a client may have only one Service Code, indicating the application it wishes to connect to.&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;The mainline Linux kernel has included DCCP support since &lt;a href=&#34;https://lwn.net/Articles/149756/&#34;&gt;2.6.14&lt;/a&gt; and mainstream distributions like Ubuntu enable it by default. However, to get the newer experimental features, you will have to build the kernel from the DCCP Test Tree. Or you can also grab the latest stable kernel release merged with the experimental DCCP changes from &lt;a href=&#34;https://github.com/unmole/linux-dccp/releases/latest&#34;&gt;here&lt;/a&gt;. Be sure to enable all the CCIDs in the kernel configuration in &lt;em&gt;Networking Support&lt;/em&gt; &amp;ndash;&amp;gt; &lt;em&gt;Networking Options&lt;/em&gt; &amp;ndash;&amp;gt; &lt;em&gt;The DCCP Protocol&lt;/em&gt; &amp;ndash;&amp;gt; &lt;em&gt;DCCP CCIDs Configuration&lt;/em&gt;. Like the Debian Installation Guide Says, &amp;ldquo;&lt;em&gt;Don&amp;rsquo;t be afraid to try compiling the kernel. It&amp;rsquo;s fun and profitable.&lt;/em&gt;&amp;rdquo; For now, Linux is the only operating system supporting native DCCP, unless you count the patch for an ancient version of FreeBSD.&lt;/p&gt;

&lt;h2 id=&#34;example-in-c&#34;&gt;Example in C&lt;/h2&gt;

&lt;p&gt;The server and client look almost exactly the same as their TCP counterparts with the exception fo the socket type and setting of the service code. The client uses &lt;em&gt;getsockopt()&lt;/em&gt; to read the current maximum packet size. Reading the available CCIDs on the host is shown in &lt;strong&gt;probe.c&lt;/strong&gt;. As libc doesn&amp;rsquo;t still have a &lt;strong&gt;netinet/dccp.h&lt;/strong&gt; header, you will have to get the required constants from the kernel sources or directly use the &lt;strong&gt;dccp.h&lt;/strong&gt; header below. &lt;a href=&#34;https://www.anmolsarma.in/dl/dccp_socket_example.tar.gz&#34;&gt;Download Code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;server.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;quot;dccp.h&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800&#34;&gt;#define PORT 1337&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define SERVICE_CODE 42&lt;/span&gt;

&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;error_exit&lt;/span&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;str)
{
	perror(str);
	exit(errno);
}

&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;**&lt;/span&gt;argv)
{
	&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; listen_sock &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_DCCP, IPPROTO_DCCP);
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (listen_sock &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;socket&amp;quot;&lt;/span&gt;);

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; sockaddr_in servaddr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
		.sin_family &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; AF_INET,
		.sin_addr.s_addr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; htonl(INADDR_ANY),
		.sin_port &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; htons(PORT),
	};

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt;) {
		       &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;}, &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt;)))
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;setsockopt(SO_REUSEADDR)&amp;quot;&lt;/span&gt;);

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (bind(listen_sock, (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;servaddr, &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(servaddr)))
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;bind&amp;quot;&lt;/span&gt;);

	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// DCCP mandates the use of a &amp;#39;Service Code&amp;#39; in addition the port&lt;/span&gt;
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (setsockopt(listen_sock, SOL_DCCP, DCCP_SOCKOPT_SERVICE, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt;) {
		       htonl(SERVICE_CODE)}, &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt;)))
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;setsockopt(DCCP_SOCKOPT_SERVICE)&amp;quot;&lt;/span&gt;);

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (listen(listen_sock, &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;))
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;listen&amp;quot;&lt;/span&gt;);

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;for&lt;/span&gt; (;;) {

		printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Waiting for connection...&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;);

		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; sockaddr_in client_addr;
		&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;socklen_t&lt;/span&gt; addr_len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(client_addr);

		&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; conn_sock &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; accept(listen_sock, (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;client_addr, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;addr_len);
		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (conn_sock &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) {
			perror(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;accept&amp;quot;&lt;/span&gt;);
			&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;continue&lt;/span&gt;;
		}

		printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Connection received from %s:%d&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;,
		       inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;for&lt;/span&gt; (;;) {
			&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;char&lt;/span&gt; buffer[&lt;span style=&#34;color: #666666&#34;&gt;1024&lt;/span&gt;];
			&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Each recv() will read only one individual message.&lt;/span&gt;
			&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Datagrams, not a stream!&lt;/span&gt;
			&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; ret &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; recv(conn_sock, buffer, &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(buffer), &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;);
			&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color: #666666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
				printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Received: %s&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;, buffer);
			&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;else&lt;/span&gt;
				&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;break&lt;/span&gt;;

		}

		close(conn_sock);
	}
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;client.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;quot;dccp.h&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;error_exit&lt;/span&gt;(&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;str)
{
	perror(str);
	exit(errno);
}

&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;argv[])
{
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt;) {
		printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Usage: ./client &amp;lt;server address&amp;gt; &amp;lt;port&amp;gt; &amp;lt;service code&amp;gt; &amp;lt;message 1&amp;gt; [message 2] ... &lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;);
		exit(&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;);
	}
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; sockaddr_in server_addr &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; {
		.sin_family &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; AF_INET,
		.sin_port &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; htons(atoi(argv[&lt;span style=&#34;color: #666666&#34;&gt;2&lt;/span&gt;])),
	};

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color: #666666&#34;&gt;!&lt;/span&gt;inet_pton(AF_INET, argv[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;], &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;server_addr.sin_addr.s_addr)) {
		printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Invalid address %s&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;, argv[&lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;]);
		exit(&lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;);
	}

	&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; socket_fd &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_DCCP, IPPROTO_DCCP);
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (socket_fd &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;socket&amp;quot;&lt;/span&gt;);

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (setsockopt(socket_fd, SOL_DCCP, DCCP_SOCKOPT_SERVICE, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt;) {htonl(atoi(argv[&lt;span style=&#34;color: #666666&#34;&gt;3&lt;/span&gt;]))}, &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt;)))
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;setsockopt(DCCP_SOCKOPT_SERVICE)&amp;quot;&lt;/span&gt;);

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (connect(socket_fd, (&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;server_addr, &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(server_addr)))
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;connect&amp;quot;&lt;/span&gt;);

	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Get the maximum packet size&lt;/span&gt;
	&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;uint32_t&lt;/span&gt; mps;
	&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;socklen_t&lt;/span&gt; res_len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;sizeof&lt;/span&gt;(mps);
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (getsockopt(socket_fd, SOL_DCCP, DCCP_SOCKOPT_GET_CUR_MPS, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;mps, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;res_len))
		error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;getsockopt(DCCP_SOCKOPT_GET_CUR_MPS)&amp;quot;&lt;/span&gt;);
	printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;Maximum Packet Size: %d&lt;/span&gt;&lt;span style=&#34;color: #BB6622; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;&lt;/span&gt;, mps);

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;4&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; argc; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (send(socket_fd, argv[i], strlen(argv[i]) &lt;span style=&#34;color: #666666&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;)
			error_exit(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;send&amp;quot;&lt;/span&gt;);
	}

	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Wait for a while to allow all the messages to be transmitted&lt;/span&gt;
	usleep(&lt;span style=&#34;color: #666666&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;1000&lt;/span&gt;);

	close(socket_fd);
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;probe.c&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;quot;dccp.h&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #008800&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #00A000&#34;&gt;main&lt;/span&gt;()
{
	&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; sock_fd &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; socket(AF_INET, SOCK_DCCP, IPPROTO_DCCP);

	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Check the congestion control schemes available&lt;/span&gt;
	&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;socklen_t&lt;/span&gt; res_len &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;;
	&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;uint8_t&lt;/span&gt; ccids[&lt;span style=&#34;color: #666666&#34;&gt;6&lt;/span&gt;];
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;if&lt;/span&gt; (getsockopt(sock_fd, SOL_DCCP, DCCP_SOCKOPT_AVAILABLE_CCIDS, ccids, &lt;span style=&#34;color: #666666&#34;&gt;&amp;amp;&lt;/span&gt;res_len)) {
		perror(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;getsockopt(DCCP_SOCKOPT_AVAILABLE_CCIDS)&amp;quot;&lt;/span&gt;);
		&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;-1&lt;/span&gt;;
	}

	printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot;%d CCIDs available:&amp;quot;&lt;/span&gt;, res_len);
	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color: #00BB00; font-weight: bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color: #666666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #666666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color: #666666&#34;&gt;&amp;lt;&lt;/span&gt; res_len; i&lt;span style=&#34;color: #666666&#34;&gt;++&lt;/span&gt;)
		printf(&lt;span style=&#34;color: #BB4444&#34;&gt;&amp;quot; %d&amp;quot;&lt;/span&gt;, ccids[i]);

	&lt;span style=&#34;color: #AA22FF; font-weight: bold&#34;&gt;return&lt;/span&gt; res_len;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;dccp.h&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f8f8f8&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;/* This file only contains constants necessary for user space to call&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt; * into the kernel and thus, contains no copyrightable information. */&lt;/span&gt;

&lt;span style=&#34;color: #008800&#34;&gt;#ifndef DCCP_DCCP_H&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_DCCP_H&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// From the kernel&amp;#39;s include/linux/socket.h&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define SOL_DCCP                        269&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// From kernel&amp;#39;s include/uapi/linux/dccp.h&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_SERVICE            2&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_CHANGE_L           3&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_CHANGE_R           4&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_GET_CUR_MPS        5&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_SERVER_TIMEWAIT    6&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_SEND_CSCOV         10&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_RECV_CSCOV         11&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_AVAILABLE_CCIDS    12&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_CCID               13&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_TX_CCID            14&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_RX_CCID            15&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_QPOLICY_ID         16&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_QPOLICY_TXQLEN     17&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_CCID_RX_INFO       128&lt;/span&gt;
&lt;span style=&#34;color: #008800&#34;&gt;#define DCCP_SOCKOPT_CCID_TX_INFO       192&lt;/span&gt;

&lt;span style=&#34;color: #008800&#34;&gt;#endif &lt;/span&gt;&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;//DCCP_DCCP_H&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;caveats-and-conclusion&#34;&gt;Caveats and Conclusion&lt;/h2&gt;

&lt;p&gt;DCCP is not mainstream. It is not widely deployed or even supported. Documentation is sparse. Although Linux DCCP NAT is functional, many intermediate boxes will probably just drop DCCP traffic. DCCP is the Fixed-gear bicycle of Layer 4, it is the ultimate hipster transport.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lazy Performance Comparison of WordPress and Ghost</title>
      <link>https://www.anmolsarma.in/post/lazy-performance-comparison-of-wordpress-and-ghost/</link>
      <pubDate>Sat, 04 Apr 2015 18:40:03 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/lazy-performance-comparison-of-wordpress-and-ghost/</guid>
      <description>&lt;p&gt;So, I switched to a new blogging platform. Again. After trying out a static approach, I moved back to a WordPress when I stumbled across &lt;a href=&#34;https://www.openshift.com/&#34;&gt;OpenShift&lt;/a&gt; (&lt;em&gt;And their fantastic &lt;a href=&#34;https://www.openshift.com/products/pricing/plan-comparison&#34;&gt;free plan&lt;/a&gt;&lt;/em&gt;). That was well over two years ago. In the meantime, I hardly blogged and didn&amp;rsquo;t really run into any issues but the blog did feel a tad sluggish.&lt;/p&gt;

&lt;p&gt;Fast-forward to yesterday when I had a sudden impulse to try something new. Ghost looked interesting so, I spun up an install using OpenShift&amp;rsquo;s &lt;a href=&#34;https://github.com/openshift-quickstart/openshift-ghost-quickstart&#34;&gt;Ghost Quick-Start&lt;/a&gt; and proceeded to &lt;a href=&#34;https://ghostforbeginners.com/how-to-transfer-blog-posts-from-wordpress-to-ghost/&#34;&gt;import data from my WordPress&lt;/a&gt; blog which turned out to be pretty painless.&lt;/p&gt;

&lt;p&gt;Given the same resources (&lt;em&gt;Small Gear&lt;/em&gt;) and same amount tweaking (i.e. none, using OpenShift&amp;rsquo;s quickstart installation defaults and using the default themes with no plugins), Ghost certainly &lt;em&gt;felt&lt;/em&gt; a lot faster but how fast was it really? To answer that (&lt;em&gt;And because I apparently have nothing better to do on a Friday night&lt;/em&gt;), I started a simultaneous stress test on WordPress and Ghost using &lt;a href=&#34;http://blazemeter.com/&#34;&gt;BlazeMeter&lt;/a&gt; with a maximum of 50 users. The answer, as turns out is a &lt;strong&gt;helluva lot faster!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;style type=&#34;text/css&#34;&gt;
table{
border-collapse: collapse;
border: 1px solid black;
width: 100%;
}
table td{
border: 1px solid black;
padding: 5px;
}
&lt;/style&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td&gt; &lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Avg. Latency&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Avg. Response Time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;90%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;95%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;99%&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Min&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Max&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Ghost&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;255.05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;752.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;739&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;793&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4647&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;602&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7240&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Wordpress&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12129.55&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21238.06&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33641&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37725&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;52178&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2273&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;67093&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;&lt;/p&gt;

&lt;p&gt;On average, Ghost&amp;rsquo;s response is &lt;strong&gt;28 times faster&lt;/strong&gt; and its latency is &lt;strong&gt;47 times lower&lt;/strong&gt;. Looking at how the two respond to load is interesting:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.anmolsarma.in/images/2015/04/Ghost-wordpress-responsetime.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.anmolsarma.in/images/2015/04/Ghost_Wordpress_latency.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Ghost doesn&amp;rsquo;t even seem to break a sweat while WordPress starts panting quite early into the run. The longest it took for Ghost to respond was &lt;strong&gt;7240 ms&lt;/strong&gt; which is almost a whole order of a magnitude faster than Wondpress&amp;rsquo;s &lt;strong&gt;67093 ms&lt;/strong&gt;. The shortest time for Ghost is &lt;strong&gt;602 ms&lt;/strong&gt;, a comfortable &lt;strong&gt;3.77 times&lt;/strong&gt; better than &lt;strong&gt;2273 ms&lt;/strong&gt; it took WordPress.&lt;/p&gt;

&lt;p&gt;Basically Ghost crushes WordPress in this admittedly lazy and unscientific test. It is pretty similar to what others have reported. If your personal WordPress setup is struggling to keep up with traffic, you should at least consider Ghost. It doesn&amp;rsquo;t have anywhere near the number of plugins or themes as WordPress, it clearly is not as mature (&lt;em&gt;It&amp;rsquo;s still in version 0.5.10&lt;/em&gt;) but boy is it fast! As for the writing flow, I can only say its different. I&amp;rsquo;m not entirely sure if it is better than what we have been used to (&lt;em&gt;No spell check&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I for one am quite happy I tried (&lt;em&gt;And switched to&lt;/em&gt;) Ghost. And I got a blog post out it to boot!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Open Letter to Dr. Subramanian Swamy</title>
      <link>https://www.anmolsarma.in/post/an-open-letter-to-dr-subramanian-swamy/</link>
      <pubDate>Tue, 21 Oct 2014 06:30:00 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/an-open-letter-to-dr-subramanian-swamy/</guid>
      <description>&lt;p&gt;Dear Dr. Subramanian Swamy,&lt;/p&gt;

&lt;p&gt;This in reference to the below picture shared by the page run by ShankhNaad in your name. Please allow me to address this latest instance of imbecility.&lt;/p&gt;

&lt;p&gt;Your contention that industrial and vehicular pollution is considered &amp;lsquo;No problem&amp;rsquo; can only result from a mind boggling level of cognitive dissonance or a mala fide intention to mislead. There is a reason why factories have to get an environmental clearance and vehicles have to meet Bharat Stage emission norms. Everyone agrees that pollution from them is a big enough problem to have an explicit legal framework.&lt;/p&gt;

&lt;p&gt;Laws aside, I find it incredulous that you pretend that there have never been protests against pollution caused due to factories and power plants. Perhaps you choose to ignore them because they were lead by &amp;lsquo;leftists&amp;rsquo;. Then again, you would surely have come across campaigns promoting public transport and cycling in a bid to reduce vehicular pollution but choosing to ignore them allows you to build up your straw man argument.&lt;/p&gt;

&lt;p&gt;As for your relative comparison of other sources which according to you “produces much much more deadly pollution”, pray tell us, which of those leads to direct exposure to heavy metals, free radicals, perchlorates and other assorted carcinogens? And this is to say nothing of the unrelenting, deafeningly loud noise all of it in the middle of densely populated areas.&lt;/p&gt;

&lt;p&gt;Lets not pretend this is actually an issue of religion or tradition. The people of Ayodhya certainly would not have welcomed back their beloved prince with clouds of asthma inducing smoke. Nor would anyone until relatively recently have had access to chemicals to blow up.&lt;/p&gt;

&lt;p&gt;Because you insist using the Dhimmi label, I have to ask: Your own party colleague, Dr. Harsh Vardhan, the Union Minister for Health and Family Welfare, made an appeal for a &amp;lsquo;Silent Diwali&amp;rsquo;. Does that make him a Dhimmi too? Or is he simply a “leftists pseudo-intellectual”?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.anmolsarma.in/images/2015/04/Diwali-Shank-Naad.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Note: The above image belongs to a third party and is used in accordance with Section 52 of the Indian Copyright Act of 1957.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>An Open Letter to Chetan Bhagat</title>
      <link>https://www.anmolsarma.in/post/an-open-letter-to-chetan-bhagat/</link>
      <pubDate>Sat, 15 Feb 2014 06:30:00 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/an-open-letter-to-chetan-bhagat/</guid>
      <description>&lt;p&gt;Dear Mr. Chetan Bhagat,&lt;/p&gt;

&lt;p&gt;I have never been a fan of your cutesy novels targeted at clueless young adults. However, I am extremely disturbed by your attempts to &amp;lsquo;enlighten&amp;rsquo; your readership by projecting your partisan views as the neutral and objective voice of reason.&lt;/p&gt;

&lt;p&gt;The major chunk of your fan base is made up of people who have little to no understanding of political issues and they tend to treat your half assed political ramblings as gospel. As undeserved as it may be, you wield considerable influence over a certain niche of the Indian youth. I urge you to use this power responsibly for the greater good and stop propping up disgraced politicos with a vested interest in perpetuating the status quo.&lt;/p&gt;

&lt;p&gt;You frequently talk about systemic change and revolution, it is about time you walked the talk.&lt;/p&gt;

&lt;p&gt;Best Wishes,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Open Letter to Devyani Khobragade</title>
      <link>https://www.anmolsarma.in/post/an/</link>
      <pubDate>Sun, 12 Jan 2014 06:30:00 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/an/</guid>
      <description>&lt;p&gt;Dear Miss Khobragade,&lt;/p&gt;

&lt;p&gt;The government and the people of India were on your side when the issues were international law and diplomatic protocol. Now that you are back in India, you are requested to stop playing the martyr. You see, nobody gives a rodent&amp;rsquo;s posterior if you cannot visit your sons should they choose to study and work in the US.&lt;/p&gt;

&lt;p&gt;Best wishes,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An Open Letter to Modibots</title>
      <link>https://www.anmolsarma.in/post/an-open-letter-to-modibots/</link>
      <pubDate>Thu, 26 Sep 2013 06:30:00 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/an-open-letter-to-modibots/</guid>
      <description>&lt;p&gt;Dear Modibots,&lt;/p&gt;

&lt;p&gt;On the Internet, spammers are considered the scum of humanity. By indiscriminately spamming people&amp;rsquo;s inboxes, you are only giving credence to the idea that you are a bunch of obnoxiously ignorant boisterous knuckle-dragging sheeple who do not belong in the civilized world, let alone the Internet.&lt;/p&gt;

&lt;p&gt;Best wishes,&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Art of Living Foundation&#39;s Kurshed Batliwala Debunked</title>
      <link>https://www.anmolsarma.in/post/kurshed-batliwala-debunked/</link>
      <pubDate>Sun, 28 Jul 2013 10:07:52 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/kurshed-batliwala-debunked/</guid>
      <description>&lt;p&gt;A critical look at Khurshed Batliwala’s talk, “Technology of Spirituality” delivered at Ruia College, Mumbai.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/RSHFzZmQPj0&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Mr. Batliwala makes a number of extraordinary claims about the state of ancient Indian science and technology. Most of them however, turn out to be exaggerations, misinterpretations or outright fabrications. He then attributes all scientific progress to ‘spirituality’.&lt;/p&gt;

&lt;p&gt;The talk is nothing more than a sales pitch for Mr. Mr. Ravi Shankar’s ‘Art of Living Foundation’.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk @ EmWare</title>
      <link>https://www.anmolsarma.in/post/talk-emware/</link>
      <pubDate>Mon, 27 May 2013 06:30:00 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/talk-emware/</guid>
      <description>&lt;p&gt;Gave an introductory talk on Linux, basically a rehash of the &lt;a href=&#34;http://www.anmolsarma.in/talk-klu/&#34;&gt;talk I gave at KLU&lt;/a&gt; a couple of years ago.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;cfa24e0065b4491d8c06a71a514df295&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Talk @ EmWare: Getting Started with Git</title>
      <link>https://www.anmolsarma.in/post/talk-emware-getting-started-with-git/</link>
      <pubDate>Fri, 17 May 2013 06:30:00 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/talk-emware-getting-started-with-git/</guid>
      <description>&lt;p&gt;Gave an introductory interactive tutorial on using Git. I couldn&amp;rsquo;t finish the slides on time but managed cover everything on the agenda.&lt;/p&gt;

&lt;p&gt;Now that the talk is done, I&amp;rsquo;m don&amp;rsquo;t feel especially inclined to complete the slides.&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;0ed1c9358c2e4f42b4380758771770fc&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Defeating India&#39;s Central Monitoring System</title>
      <link>https://www.anmolsarma.in/post/defeating-the-central-monitoring-system/</link>
      <pubDate>Thu, 09 May 2013 14:08:00 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/defeating-the-central-monitoring-system/</guid>
      <description>&lt;p&gt;The Government of India has rolled out the &lt;a href=&#34;http://en.wikipedia.org/wiki/Central_Monitoring_System&#34;&gt;Central Monitoring System&lt;/a&gt; which will allow it to access any piece of data passing through an Indian service provider. This means the government can now read all your text messages, emails and call records.&lt;/p&gt;

&lt;p&gt;Because &lt;em&gt;privacy&lt;/em&gt; does not bring in votes, it is highly unlikely that any political party will oppose this system. Circumventing this system however, is rather simple using &lt;a href=&#34;http://en.wikipedia.org/wiki/Pretty_Good_Privacy&#34;&gt;PGP&lt;/a&gt; or any other &lt;em&gt;munition grade&lt;/em&gt; cryptographic scheme. So, if anyone wishes to communicate with me securely, please encrypt your message using this &lt;a href=&#34;http://serverfault.com/questions/471412/gpg-gen-key-hangs-at-gaining-enough-entropy-on-centos-6&#34;&gt;key&lt;/a&gt;, whose fingerprint should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FAD8 0050 02CA 5412 A34B  C40D 6DBD 3D52 56AE 35C1 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may now put your tin-foil hat back on. Thank you!&lt;/p&gt;

&lt;p&gt;Edit: Replaced my old key with a 4096-bit RSA key.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello Again, World!</title>
      <link>https://www.anmolsarma.in/post/hello-again-world/</link>
      <pubDate>Tue, 19 Feb 2013 17:59:29 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/hello-again-world/</guid>
      <description>&lt;p&gt;Here it goes again: After a couple of attempts with Blogger, a dozen iterations with WordPress, a very brief tryst with Drupal and a false start with Bloggart, I’ve now decided to ditch dynamic content management systems and give Octopress a spin.&lt;/p&gt;

&lt;p&gt;I like the idea of a statically generated site I can deploy anywhere. I used Sphinx for a documentation once and the experience with was pretty good. However, getting Sphinx to work for a personal blog seemed to be too much work, so Octopress it is. So far I’m really happy with Octopress and with minimal tweaking, I have all the functionality I need. Hopefully, I will stick with it and actually blog this time around. Fingers crossed!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Das Blinkenlights on the MSP430 Launchpad with Linux</title>
      <link>https://www.anmolsarma.in/post/msp430-launchpad-linux/</link>
      <pubDate>Sat, 12 Jan 2013 19:06:05 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/msp430-launchpad-linux/</guid>
      <description>&lt;p&gt;TI’s &lt;a href=&#34;http://www.ti.com/tool/msp-exp430g2&#34; title=&#34;MSP430 Launchpad&#34;&gt;MSP430 LaunchPad&lt;/a&gt; development kit offers some serious bang for the buck. You get two modern 16-bit microcontrollers, a programmer-cum-debugger with pins broken out and a USB cable for less than 5 USD inclusive of shipping. TI even provides two free (as in beer) IDE’s for Windows. Linux support though was a bit sketchy when the board was first released.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.anmolsarma.in/images/2015/09/LaunchPad.jpg&#34; alt=&#34;&#34; /&gt;
 &lt;/p&gt;

&lt;p&gt;Things of course have greatly improved and getting the Launchpad to work with Linux is now a breeze. The versions of MSPGCC and MSPDebug in Ubuntu 11.10’s repositories seem to work just fine. There’s also functional Arduino fork for the MSP430 called &lt;a href=&#34;http://energia.nu/&#34; title=&#34;Energia&#34;&gt;Energia&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hindutva and Fascism Compared</title>
      <link>https://www.anmolsarma.in/post/hindutva-and-fascism-compared/</link>
      <pubDate>Thu, 20 Sep 2012 19:20:11 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/hindutva-and-fascism-compared/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://www.anmolsarma.in/images/2015/04/Hindutva-and-Fascism-Compared.png&#34; alt=&#34;Hindutva and Fascism Compared&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mole Nama: A Linux Fantasy Saga</title>
      <link>https://www.anmolsarma.in/post/mole-nama-a-linux-fantasy-saga/</link>
      <pubDate>Sun, 19 Aug 2012 18:23:22 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/mole-nama-a-linux-fantasy-saga/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Mole Nama&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;A historical account of the Mole’ani people in the Free Lands&lt;/em&gt;&lt;/p&gt;

&lt;p&gt; -Inestimabel Montcastellus&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;  We Mole’ani are a Geekic people, who like millions of other races call the Free Lands home. However, our people originally came from the other side; the Dark Lands that shall not be named. The Dark Lands were under monopolistic rule of the Borg and their brethren. Piracy was common and so were the viral diseases which accompanied the booty. Systemic crashes and ‘illegal operations’ were the order of the day. The Three Fingered Salute was often the only way out. But even then, there was the ever present danger of being crippled by a terrorizing bout of Blue Death.&lt;/p&gt;

&lt;p&gt;  In the midst of chaos, the Mole’ani saw hope. The communes of Firey Foxen and We El Sea brought some stability, the likes of which were never heard of in the Dark Lands. This coupled with the Enlightenment of Openness convinced our people that there was a better way.&lt;br /&gt;
 While the Mole’ani were eager to move to where there was freedom and openness, obtaining a passage to the other side was difficult. With their limited means, they could only go as far as the Isles of Pupey before being forced to return to the Dark Lands.&lt;/p&gt;

&lt;p&gt;  Then came redemption. The Mole’ani came to know that Benevolent Emperor of Ubunatia, determined to assist people like them, had declared the Shipet campaign and sent out his fleet. Finally, our people were able to cross the Vu’Bee Strait, landing on Ubunatian coasts in the era of the Heron.&lt;/p&gt;

&lt;p&gt;  There, they quickly assimilated and became Ubunatians in name and spirit, severing their last ties to Darkness. The Mole’ani turned into missionary paladins, helping bring in dozens of new ally races into the Free Lands. Our people and our allies traveled widely across the Free Lands, touring Ubunatia’s vassal states Kubunatia and Zubunatia and even as far as the lands of the Scarlet Caps and Green Lizards.&lt;/p&gt;

&lt;p&gt;  The Mole’ani however remained loyal Ubunatians. There was minimal dissent even during the Directional Reform of the Lynx era.Things changed with the stirring of the Unitarian Revolution. Hoping to preserve their way of life, our people sought refuge in the vassal state of Zubunatia. Their attempts to change the Zubunatian system proved disastrous, forcing them to flee North and defect to the Mint Realm.&lt;/p&gt;

&lt;p&gt;  And our people remained in peace. However, trouble started once more. The Genom clergy’s antics had caused massive outrage across the Free Lands. Ubunatia, the region’s dominant power had already parted ways with the Genom during the Revolution and refused to have anything to do with it. Refugees fled to the North in their hundreds of thousands and the Mint Realm rose in defiance.&lt;/p&gt;

&lt;p&gt;  In the far away Archinan Republic, a group of dissidents splintered from the Genom and proclaimed the Path of Mayte to defend their cherished old ways. The Mint Realm, although skeptical about Mayte’s future, immediately declared its support to the fledgling movement.&lt;br /&gt;
 At the same time, the Realm ennobled Sinamon to ensure the survival of the old ways.&lt;/p&gt;

&lt;p&gt;  In the midst of turmoil, the Mole’ani yearned for stability. They returned to the South and settled in the borderlands of Ubunatia and Zubunatia where they remain to this day.&lt;/p&gt;

&lt;p&gt;Inspired by the &lt;a href=&#34;http://www.dedoimedo.com/computers/linux-world-map.html&#34; title=&#34;Linux World Map&#34;&gt;Great Linux World Map&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Talk @ KLU</title>
      <link>https://www.anmolsarma.in/post/talk-klu/</link>
      <pubDate>Mon, 17 Oct 2011 21:20:38 +0000</pubDate>
      
      <guid>https://www.anmolsarma.in/post/talk-klu/</guid>
      <description>&lt;p&gt;Gave an introductory talk on Linux at &lt;a href=&#34;http://www.kluniversity.in/&#34;&gt;Koneru Lakshmiah University&lt;/a&gt;, with &lt;a href=&#34;http://www.elitenewb.wordpress.com/&#34;&gt;Vamsi&lt;/a&gt;following up with a talk on Bugs and Hacks as a part of the ‘workshop’ organised by the KLU Linux Users Group. With about 150 newbish students in attendance, it was fun albeit in a masochistic kind of a way.&lt;/p&gt;

&lt;p&gt;Here’s a shitty picture from the talk, courtesy of Vamsi:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://www.anmolsarma.in/images/2015/04/KLU-Linux-1.jpg&#34; alt=&#34;KLU Linux&#34; /&gt;
And here are the sildes:
&lt;a href=&#34;https://doc-0g-58-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/ud2qnqgsvv8cidl694n98fi3mpgjpo8m/1428069600000/12598453977496474269/*/0B98iBt5Plb4kMWYxZmQ0NTQtMjQxMS00MzUzLWI0NzUtMGJkZTNlNWE5MGFl?e=download&#34;&gt;&lt;img src=&#34;https://www.anmolsarma.in/images/2015/04/Linux-Say-whaat--2.png&#34; alt=&#34;Linux? Say whaat?!&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>